{"version":3,"sources":["firebase.js","redux/types/editors.types.js","redux/reducers/editors.reducer.js","redux/types/questions.types.js","redux/reducers/questions.reducer.js","redux/rootReducer.js","redux/store.js","redux/actions/questions.action.js","util/initScript.js","redux/actions/editors.action.js","pages/LoginPage/index.js","pages/LoginPage/LoginPage.js","pages/InputPage/index.js","pages/InputPage/InputPage.js","pages/ListViewPage/index.js","pages/ListViewPage/ListViewPage.js","pages/Main/index.js","pages/Main/Main.js","App.js","index.js"],"names":["console","log","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","questionsRef","collection","editorsRef","provider","GoogleAuthProvider","ADD_EDITORS","SET_IS_EDITOR","INITIAL_STATE","editors","isEditor","editorsReducer","state","action","type","_","concat","payload","ADD_QUESTIONS","universalQuestions","individualQuestions","questionsReducer","newUniversalQuestions","newIndividualQuestions","rootReducer","combineReducers","questions","store","createStore","composeWithDevTools","addQuestions","newQuestions","filter","question","isUniversal","fetchEditors","get","then","querySnapshot","forEach","doc","newEditors","data","dispatch","currentUser","uid","id","initScript","where","onSnapshot","docs","map","allQuestions","unionBy","error","LoginPage","Container","textAlign","Header","as","Button","color","onClick","signInWithPopup","response","catch","InputPage","connect","props","emptyQuestionDoc","description","user","useState","questionDoc","setQuestionDoc","className","Form","onSubmit","add","Input","label","value","onChange","e","target","TextArea","Field","Checkbox","checked","ListViewPage","TableHeader","Table","Row","Object","keys","header","HeaderCell","celled","Body","questionObj","values","Cell","Main","loggedIn","toggleLogin","loading","setLoading","useEffect","onAuthStateChanged","MainRoutes","path","exact","component","Loader","active","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.694af0f3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC02M3EXWtVG8RXJAmOuWJTVWk8ilYLhqg\",\n    authDomain: \"ideator-4f754.firebaseapp.com\",\n    projectId: \"ideator-4f754\",\n    storageBucket: \"ideator-4f754.appspot.com\",\n    messagingSenderId: \"659192949117\",\n    appId: \"1:659192949117:web:583b0a392554692a164414\",\n    measurementId: \"G-GRKLL11NWW\"\n};\n\nconsole.log('initialize firebase app')\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const questionsRef = firestore.collection('questions');\nexport const editorsRef = firestore.collection('editors');\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const userDoc = (uid) => { return firestore.doc('users/' + uid) };","export const ADD_EDITORS = 'ADD_EDITORS';\nexport const SET_IS_EDITOR = 'SET_IS_EDITOR';","import { ADD_EDITORS, SET_IS_EDITOR } from '../types/editors.types';\nimport _ from 'lodash'\n\nconst INITIAL_STATE = {\n    editors: [],\n    isEditor: false,\n};\nconst editorsReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_EDITORS:\n            return {\n                ...state, editors: _.concat(state.editors, action.payload)\n            };\n        case SET_IS_EDITOR:\n            return {\n                ...state, isEditor: action.payload\n            };\n        default: return state;\n    }\n};\nexport default editorsReducer;","export const ADD_QUESTIONS = 'ADD_QUESTIONS';\n","import { ADD_QUESTIONS } from '../types/questions.types';\nimport _ from 'lodash'\n\nconst INITIAL_STATE = {\n    universalQuestions: [],\n    individualQuestions: [],\n};\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_QUESTIONS:\n            return {\n                ...state,\n                universalQuestions: _.concat(state.universalQuestions, action.payload.newUniversalQuestions),\n                individualQuestions: _.concat(state.individualQuestions, action.payload.newIndividualQuestions)\n            };\n        default: return state;\n    }\n};\nexport default questionsReducer;","import { combineReducers } from 'redux';\nimport editorsReducer from './reducers/editors.reducer';\nimport questionsReducer from './reducers/questions.reducer';\n\nconst rootReducer = combineReducers({\n    editors: editorsReducer,\n    questions: questionsReducer,\n});\nexport default rootReducer;","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(),\n);\nexport default store;","import { ADD_QUESTIONS } from '../types/questions.types';\nimport _ from 'lodash'\n\nexport const addQuestions = (newQuestions) => {\n    const newUniversalQuestions = _.filter(newQuestions, (question) => question.isUniversal)\n    const newIndividualQuestions = _.filter(newQuestions, (question) => !question.isUniversal)\n    const payload = {\n        newUniversalQuestions,\n        newIndividualQuestions,\n    }\n    return {\n        type: ADD_QUESTIONS,\n        payload,\n    };\n};\n","import { editorsRef, auth, questionsRef } from '../firebase'\nimport { addEditors, setIsEditor } from '../redux/actions/editors.action'\nimport store from '../redux/store';\nimport { addQuestions } from '../redux/actions/questions.action';\nimport _ from 'lodash'\n\nconst fetchEditors = () => {\n    editorsRef\n        .get()\n        .then(\n            querySnapshot => {\n                console.log(\"get editors from firebase\")\n                querySnapshot.forEach((doc) => {\n                    console.log(doc.data())\n                    store.dispatch(addEditors(doc.data()))\n                    if (auth.currentUser.uid === doc.data().id) {\n                        store.dispatch(setIsEditor(true))\n                    }\n                })\n            })\n}\n\nconst fetchQuestions = () => {\n    // get universal questions\n    questionsRef\n        .where('isUniversal', '==', true)\n        .onSnapshot(\n            querySnapshot => {\n                const universalQuestions = querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n\n                // get individual questions\n                questionsRef\n                    .where('user', '==', auth.currentUser.uid)\n                    .onSnapshot(\n                        querySnapshot => {\n                            const individualQuestions = querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n\n                            // filter questions and add to redux\n                            const allQuestions = _.unionBy(individualQuestions, universalQuestions, (question) => question.id)\n                            store.dispatch(addQuestions(allQuestions))\n                        }\n                    )\n            },\n            error => {\n                console.log(error);\n            }\n        )\n}\n\nexport const initScript = () => {\n    console.log('run initial script')\n    fetchEditors();\n    fetchQuestions();\n}","import { ADD_EDITORS, SET_IS_EDITOR } from '../types/editors.types';\n\nexport const addEditors = (newEditors) => {\n    return {\n        type: ADD_EDITORS,\n        payload: newEditors,\n    };\n};\n\nexport const setIsEditor = (isEditor) => {\n    return {\n        type: SET_IS_EDITOR,\n        payload: isEditor,\n    };\n};\n","import { LoginPage } from './LoginPage'\nexport default LoginPage\n","import React from \"react\";\nimport { provider, auth } from '../../firebase'\nimport { Container, Button, Header } from 'semantic-ui-react'\nimport { initScript } from \"../../util/initScript\";\n\nexport const LoginPage = () => {\n\n    const googleSignIn = () => {\n        auth.signInWithPopup(provider).then((response) => {\n            console.log(response)\n            initScript();\n        }).catch((error) => {\n            console.log(error)\n        });\n\n    }\n\n    return (\n        <Container textAlign=\"center\">\n            <Header as='h1'>Welcome to Ideator</Header>\n            <Header as='h3'>Helping build meaningful relationships with insightful questions</Header>\n            <Button color='google plus' onClick={googleSignIn}>Sign in with Google</Button>\n        </Container>\n    )\n}\n","import InputPage from './InputPage'\nexport default InputPage\n","import React, { useState } from \"react\";\nimport { questionsRef, auth } from '../../firebase'\nimport { Form, Checkbox } from 'semantic-ui-react'\nimport \"./inputpage.scss\";\nimport { connect } from 'react-redux';\nimport { addQuestions } from '../../redux/actions/questions.action'\n\nconst InputPage = (props) => {\n    const emptyQuestionDoc = {\n        question: '',\n        description: '',\n        isUniversal: false,\n        user: auth.currentUser.uid,\n    }\n\n    const [questionDoc, setQuestionDoc] = useState(emptyQuestionDoc)\n\n    const onSubmit = () => {\n        questionsRef\n            .add(questionDoc)\n            .then(() => {\n                setQuestionDoc(emptyQuestionDoc)\n                // TODO: after submission you should add the question doc to the redux store\n                props.addQuestions([questionDoc])\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"root\">\n            <Form onSubmit={onSubmit} className=\"form-container\">\n                <Form.Input\n                    type=\"text\"\n                    label=\"Enter Question\"\n                    value={questionDoc.question}\n                    onChange={(e) => setQuestionDoc({ ...questionDoc, question: e.target.value })}\n                />\n                <Form.TextArea\n                    type=\"text\"\n                    label=\"Enter Description\"\n                    value={questionDoc.description}\n                    onChange={(e) => setQuestionDoc({ ...questionDoc, description: e.target.value })}\n                />\n                {props.isEditor && (\n                    <Form.Field>\n                        <Checkbox\n                            label='Show this question to all users on Ideator'\n                            checked={questionDoc.isUniversal}\n                            onChange={() => setQuestionDoc({ ...questionDoc, isUniversal: !questionDoc.isUniversal })} />\n                    </Form.Field>\n                )}\n                <Form.Button>Submit</Form.Button>\n            </Form>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isEditor: state.editors.isEditor,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addQuestions: (newQuestions) => dispatch(addQuestions(newQuestions)),\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InputPage);","import ListViewPage from './ListViewPage'\nexport default ListViewPage\n","import React, { useState } from \"react\";\nimport { Table } from 'semantic-ui-react'\nimport { connect } from 'react-redux';\n\nconst ListViewPage = (props) => {\n    const { universalQuestions, individualQuestions } = props;\n\n    const TableHeader = () => {\n        return (\n            <Table.Header>\n                <Table.Row>\n                    {Object.keys(universalQuestions[0]).map((header) => {\n                        return <Table.HeaderCell>{header}</Table.HeaderCell>\n                    })}\n                </Table.Row>\n            </Table.Header>\n        )\n    }\n    // TODO: add individual questions table\n\n    return (\n        <>\n            {universalQuestions[0] &&\n                (<Table celled>\n                    <TableHeader />\n\n                    <Table.Body>\n                        {universalQuestions.map((questionObj) => {\n                            return (\n                                <Table.Row>\n                                    {Object.values(questionObj).map((value) => {\n                                        return (<Table.Cell>{value}</Table.Cell>)\n                                    })}\n                                </Table.Row>\n                            )\n                        })}\n                    </Table.Body>\n                </Table>)\n            }\n        </>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        universalQuestions: state.questions.universalQuestions,\n        individualQuestions: state.questions.individualQuestions,\n    };\n};\nexport default connect(mapStateToProps)(ListViewPage);","import Main from './Main'\nexport default Main","// import React from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport { auth } from '../../firebase'\nimport { Loader } from 'semantic-ui-react'\nimport LoginPage from '../LoginPage'\nimport InputPage from '../InputPage'\nimport ListViewPage from '../ListViewPage'\nimport { Route } from 'react-router-dom';\n\nconst Main = () => {\n    const [loggedIn, toggleLogin] = useState(auth.currentUser != null)\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        auth.onAuthStateChanged(user => {\n            if (user) {\n                toggleLogin(true)\n            } else {\n                toggleLogin(false)\n            }\n            setLoading(false)\n        });\n    }, []);\n\n    const MainRoutes = () => {\n        return (\n            <>\n                <Route path=\"/\" exact component={ListViewPage} />\n                <Route path=\"/input\" exact component={InputPage} />\n            </>\n        )\n    }\n\n    return (\n        <div>\n            {/* <Route path=\"/input\" exact component={InputPage} />\n            <Route path=\"/\" exact component={LoginPage} /> */}\n            {loading ?\n                <Loader active />\n                : (loggedIn ?\n                    <MainRoutes />\n                    : <LoginPage />)\n            }\n        </div>\n    )\n}\n\nexport default Main;","import './App.css';\nimport Main from './pages/Main'\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { initScript } from './util/initScript'\nimport { HashRouter as Router } from 'react-router-dom';\n\ninitScript();\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}